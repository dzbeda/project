- hosts: kmanager
  become: true
  vars_prompt:
    - name: "create_keytab"
      prompt: " [1]Press 1 to generate keytab for Data Scientist users    [2]press 2 if keytab files were copied to master server under the following path: {{ jhub.local_server_keytab_location }}/"
      private: no
      default: "2"
  vars_files:
    - ./cloudera_environment.yml
    - /deployment/defaults/jhub.yml
    - ./jhub_users.yml
  tasks:

## Create namespace ##
    - name: create kuberntes namespace {{ eg_namespace }}
      become: false
      shell: kubectl create namespace {{ eg_namespace }}
      ignore_errors: true

    - name: create kuberntes namespace {{ jhub_namespace }}
      become: false
      shell: kubectl create namespace {{ jhub_namespace }}
      ignore_errors: true

    - name: create kuberntes namespace {{ kernel_namespace }}
      become: false
      shell: kubectl create namespace {{ kernel_namespace }}
      ignore_errors: true

### Create keytab directory for Data Scientist on kmanager server ###
    - name: Create local directory where Data Scientist's user  keytab shall be saved
      become: true
      file:
        path: "{{ jhub.local_server_keytab_location }}"
        state: directory
      delegate_to: localhost

    - name: Generate Kerberos keytab
      expect:
        command: ktutil
        responses:
          ktutil:
            - "add_entry -password -p {{ item.login_name }}@{{ domain | upper }} -k 1 -e rc4-hmac"
            - "wkt {{ jhub.local_server_keytab_location }}/{{ item.login_name }}.{{ jhub.keytab_file_extension }}"
            - "quit"
          Password: "{{ item.password }}"
      delegate_to: localhost
      when: create_keytab == "1"
      loop: "{{ data_scientist }}"


    ### Create keytab directory for Data Scientist on kmanager server ###
    - name: Create directory where Data Scientist's user keytab shall be saved
      become: true
      file:
        path: "{{ jhub.remote_server_keytab_location }}"
        state: directory


    ## Copy Data Scientist user keytab file ##

    - name: Copy keytab file
      become: true
      copy:
        src: "{{ jhub.local_server_keytab_location }}/{{ item.login_name }}.{{ jhub.keytab_file_extension }}"
        dest: "{{ jhub.remote_server_keytab_location }}/{{ item.login_name }}.{{ jhub.keytab_file_extension }}"
      loop: "{{ data_scientist }}"


    ## create kubernetes secret using Jhub user's keytab file ##

#    - name: delete user keytab secret from {{ kernel_namespace }} namespace
#      shell: kubectl delete secret  {{ item.login_name }}-{{ jhub.keytab_file_extension }} -n {{ kernel_namespace }}
#      become: false
#      ignore_errors: true
#      loop: "{{ data_scientist }}"
#
#    - name: delete keytabs secret from {{ kernel_namespace }} namespace
#      shell: kubectl delete secret  {{kernel_secret_for_all_keytabs }} -n {{ kernel_namespace }}
#      become: false
#      ignore_errors: true

    - name: create keytab secret per user on {{ kernel_namespace }} namespace
      become: false
      shell: kubectl create secret generic {{ item.login_name }}-{{ jhub.keytab_file_extension }} -n {{ kernel_namespace }} --from-file={{ jhub.remote_server_keytab_location }}/{{ item.login_name }}.{{ jhub.keytab_file_extension }} --dry-run -o yaml | kubectl apply -f -
      loop: "{{ data_scientist }}"

    - name: create keytabs secret including all jhub keytab users in {{ kernel_namespace }} namespace
      become: false
      shell: kubectl create secret generic {{kernel_secret_for_all_keytabs }} -n {{ kernel_namespace }} --from-file={{ jhub.remote_server_keytab_location }} --dry-run -o yaml | kubectl apply -f -

#    - name: delete keytabs secret from {{ eg_namespace }} namespace
#      shell: kubectl delete secret  {{kernel_secret_for_all_keytabs }} -n {{ eg_namespace }}
#      become: false
#      ignore_errors: true

    - name: create keytabs secret including all jhub keytab users in {{ eg_namespace }} namespace
      become: false
      shell: kubectl create secret generic {{kernel_secret_for_all_keytabs }} -n {{ eg_namespace }} --from-file={{ jhub.remote_server_keytab_location }} --dry-run -o yaml | kubectl apply -f -



    ### Remove old keycloak keytab file ###

    - name: Security - Delete keycloak keytab file from remote server
      become: true
      file:
        path: "{{ jhub.remote_server_keytab_location }}/{{ item.login_name  }}.{{ jhub.keytab_file_extension }}"
        state: absent
      loop: "{{ data_scientist }}"

    - name: Security - Delete keycloak keytab file from local server (Master server)
      become: true
      file:
        path: "{{ jhub.local_server_keytab_location }}/{{ item.login_name  }}.{{ jhub.keytab_file_extension }}"
        state: absent
      loop: "{{ data_scientist }}"
      delegate_to: localhost